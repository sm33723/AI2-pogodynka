security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'plaintext'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # users_in_memory: { memory: null }
        # users_in_memory: 
        #     memory:
        #         users:
        #             admin:
        #                 password: $2y$13$uI1f/pDBWv7DGXUbRPpFj.NF85Rc6KeXi7A72Ib/b9RHcScpc9lO2
        #                 roles:
        #                     - 'ROLE_ADMIN'
        #                     - 'ROLE_FORECAST_SHOW'
        #                     # - 'ROLE_FORECAST_NEW'
        #                     # - 'ROLE_FORECAST_EDIT'
        #                     # - 'ROLE_FORECAST_DELETE'
        #                     - 'ROLE_CITY_SHOW'
        #                     # - 'ROLE_CITY_NEW'
        #                     # - 'ROLE_CITY_EDIT'
        #                     # - 'ROLE_CITY_DELETE'
        database_users:
            entity:
                class: 'App\Entity\User'
                property: 'username'
                            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: database_users
            # http_basic:
            #     realm: 'My Secured Area'
            form_login:
                login_path: app_login
                check_path: app_login
            logout:
                path: app_logout
                target: app_city_index

    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/ , roles: PUBLIC_ACCESS }

    role_hierarchy:
        ROLE_ADMIN:
            - 'ROLE_USER'
            - 'ROLE_CITY_EDIT'
            - 'ROLE_FORECAST_EDIT'
        ROLE_USER:
            - 'ROLE_FORECAST_SHOW'
            - 'ROLE_CITY_SHOW'

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
